from aiogram.types import Message
from gigachat import GigaChat
from groq import Groq
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat
from loguru import logger

from utils.dispatcher import GIGA_CHAT, GROQ_KEY


def system_prompt(work):
    """–ü—Ä–æ–º—Ç –¥–ª—è –ò–ò"""

    if work == '–í—Ä–µ–º—è –Ω–µ —Ä–∞–±–æ—á–µ–µ':
        return """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —è–≤–ª—è–µ—Ç—Å—è –Ω–µ—Ä–∞–±–æ—á–∏–º. –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –ø–æ–∑–∂–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üïíüìÖ"""
    else:
        return """–°–µ–π—á–∞—Å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üïêüìã"""


async def get_chat_completion_gigachat(message: Message, work):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ GigaChat
        llm = GigaChat(credentials=GIGA_CHAT, scope="GIGACHAT_API_PERS", model="GigaChat",
                       # –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ù–£–¶ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã
                       verify_ssl_certs=False,
                       streaming=False, )

        messages = [SystemMessage(content=system_prompt(work)), HumanMessage(content=message.text), ]

        response = llm.invoke(messages)
        print("GigaChat: ", response.content)

        return response.content
    except Exception as e:
        logger.exception(e)


async def get_chat_completion(message: Message, work):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        client = Groq(api_key=GROQ_KEY)

        chat_completion = client.chat.completions.create(
            messages=[
                {"role": "system", "content": system_prompt(work)},
                {"role": "user", "content": message.text},
            ],
            model="llama3-groq-70b-8192-tool-use-preview",
        )

        return chat_completion.choices[0].message.content
    except Exception as e:
        logger.exception(e)
